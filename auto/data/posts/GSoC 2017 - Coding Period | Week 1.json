[
  {
    "datetime_index": "201706042100",
    "title": "GSoC 2017 - Coding Period | Week 1",
    "short_desc": "Through this blog post, I'd like to document my progress in the first week of the Coding period, Google Summer of Code 2017.",
    "tags": [
      5,
      7,
      10,
      13,
      19
    ],
    "image_preview": "gsoc.png",
    "images": [
      "banner.png",
      "from_html_example.png",
      "from_html_doc.png",
      "issues.png"
    ],
    "hyperlinks": [
      [
        "GitHub",
        "https://github.com/SciRuby/"
      ],
      [
        "Website",
        "http://sciruby.com/"
      ],
      [
        "this Pull Request",
        "https://github.com/SciRuby/daru/pull/311"
      ],
      [
        "daru-io",
        "https://github.com/athityakumar/daru-io"
      ],
      [
        "RSpec",
        "http://rspec.info/"
      ],
      [
        "Rubocop",
        "http://batsov.com/rubocop/"
      ],
      [
        "Travis CI",
        "https://travis-ci.org/"
      ],
      [
        "YARD",
        "http://yardoc.org/"
      ],
      [
        "review comment",
        "https://github.com/athityakumar/daru-io/pull/16#discussion_r119859429"
      ],
      [
        "Victor (@zverok)",
        "https://github.com/zverok"
      ],
      [
        "this Pull Request",
        "https://github.com/athityakumar/daru-io/pull/16"
      ],
      [
        "this Pull Request",
        "https://github.com/athityakumar/daru-io/pull/17"
      ]
 
    ],
    "html_content": "<img class='ui centered image'><p> <span style='display:block; float:left; font-size: 200%;  color:#ffffff; margin-top:5px; margin-right:8px; padding: 10px 20px 10px 20px; text-align:center; background-color: #000;'>F</span>irst week of Coding period of GSoC 2017 as per my timeline, started on the 29th of May 2017. This was something I was really looking up to, right from the moment I was selected by SciRuby organization ( <a> | <a> ) for my project idea daru-io. In my opinion, the first week was very interesting and productive. Through this blog post, I'd like to document my progress during this week.</p><br><div class='ui horizontal divider'>HTML Importer for daru</div><p>During the earlier part of this week, I continued on my Pull Request regarding the HTML Importer method for daru , <code class='language-ruby' style='background: #fff'> Daru::DataFrame.from_html()</code>. Through this method, I implemented web scraping to get tables from a HTML page and convert them to an <code class='language-ruby' style='background: #fff'>Array</code> of <code class='language-ruby' style='background: #fff'>Daru::DataFrame</code>s. The <code class='language-ruby' style='background: #fff'>Mechanize</code> gem has been used to implement web scraping. <br><br> Though the method is now able to properly parse the dataframes from a couple of websites, it does have a downside. The downside is that, there are websites that dynamically load the HTML tables by inline JS, and this method won't be able to parse such tables. <br><br>The logic behind detection of index and order of a table can be seen from <a>. Have a look at a couple of screenshots documenting the method with an example - </p> <img class='ui centered image'> <img class='ui centered image'><br><div class='ui horizontal divider'>Setting up daru-io repository</div><h4><ul class='ui list'><li><span style='font-weight:100;'> Repository : <a></span><li><span style='font-weight:100;'> Functionality Testing : <a> </span></li><li><span style='font-weight:100;'> Static Code Analyzer : <a> </span></li><li><span style='font-weight:100;'> Continous Integration : <a> </span></li><li><span style='font-weight:100;'> Documentation Tool for the Ruby gem : <a> </span></li></ul></h4><img class='ui centered image'><br><div class='ui horizontal divider'>Porting existing IO modules of daru to daru-io</div><p>The existing IO modules of daru - 5 importers and 2 exporters, are to be ported to the daru-io repository to ensure that subsequent IO modules that are to be newly formed, look consistent with the older ones. That way, daru-io can also be released as a plugin gem to daru, by August end. By Friday, I had ported the existing modules with updated YARD docs styling and modern syntax for RSpec tests. However, a <a> by mentor <a> seems to suggest a better inheritence layout and usage methodology to daru-io modules. <br><br>That is, something used like <code class='language-ruby' style='background: #fff'>Daru::IO::Exporters::CSV.write('path/to/csv/file', options)</code> can now be used with lazy-calling feature such as, </p><pre><code class='language-ruby' style='background: #fff'>csv_exporter = Daru::IO::Exporters::CSV.new('path/to/csv/file', options)\n# Do some thing here \ncsv_exporter.write</code></pre><p>This is still under progress with <a>, and isn't merged yet. Once the lazy-calling feature has been approved for one module, it is easy to extend them to other modules. I've been putting effort from my side, and it hopefully doesn't delay my timeline. But if it does, I've a swiss-knife up my sleeve called 'Buffer period', which is meant for handling such delays.</p><br><div class='ui horizontal divider'>Adding fixture files for daru-io repository</div><p>Fixture files are the input files that are used in testing the modules (importers, in my case). As I'd like to tackle various format importers such as Redis, Mongodb, JSON, Avro, RData & RDS in my GSoC tenure, it's a good starting point to start adding the fixture files. Progress regarding this has been made in <a>, and is yet to be merged.</p>",
    "disqus_identifier": "gxoehaqiylkfcmnstjzbvrdwup"
  }
]