[
  {
    "datetime_index": "201701262000",
    "title": "A Ruby API gem for Inbound.org platform",
    "short_desc": "Inbound.org is a social-media platform for inbound marketers. This is a ruby API gem to programatically perform tasks like login, follow, unfollow, search on Inbound.org portal. This helps many start-ups in implementing automated growth-hacking in their initial phase, to have a wider audience channel.",
    "tags": [
      5,
      7,
      10,
      13
    ],
    "image_preview": "ror.png",
    "images": [
      "website.png"
    ],
    "hyperlinks": [
      ["RubyGems website","https://rubygems.org/gems/inbound_api"],      
      ["here","https://github.com/athityakumar/inbound_api/issues"],
      ["repository","https://github.com/athityakumar/inbound_api"]
    ],
    "html_content": "<p> <span style='display:block; float:left; font-size: 200%;  color:#ffffff; margin-top:5px; margin-right:8px; padding: 10px 20px 10px 20px; text-align:center; background-color: #000;'>E</span>ver heard of this term - <i>Growth hacking</i>? Probably not. Growth hacking refers to a procedure by which you artificially increase your circle on any social-media platform in general. This is a really important factor that start-ups have to consider, while they're still in their initial phase. And the need to automate growth hacking is really immense. Keep reading, to understand the logic of growth-hacking and functionality of this API. </p><br><div class='ui horizontal divider'>LOGIC OF GROWTH HACKING</div><p>Growth hacking has a very interesting logic behind its working. This is what a step-by-step analysis of growth hacking would roughly resemble -  </p><h4 style='font-weight: 100;'><ol><li> &nbsp;  Repeat steps 2 to 5 for each social-media platform. <br> </li><li> &nbsp;  Get the list of users who're following your competitor in that social-media platform. Most of them are your target audience too, as they were interested in your competitor. Repeat steps 3 to 5 for each such follower. <br> </li><li> &nbsp;  Select a user from the above list. </li><li> &nbsp;  Follow that user. They receive a notification that you've followed them. </li><li> &nbsp;  If they follow you back within <i>n</i> days, great - <i>mission accomplished</i>. Else, <ol><li> &nbsp;  If you've already followed them for a critical cut-off of <i>m</i> times, don't follow them anymore. That user is probably not interested in this sector - let's not spam them with any more notifications. </li><li> &nbsp;  Else, unfollow them & repeat from step 3. </li></ol></li></ol></h4><p>Pretty smooth, huh? Most social-media platforms such as Facebook, Linkedin, Twitter, Google offer APIs for programmatic implementation of growth-hacking. This Inbound API Ruby gem is a similar API for ruby language. </p><br><div class='ui horizontal divider'>WORKING WITH THE API</div><h4><ul><li> Setting up dependencies : <br> <div class='ui info message'> <pre><code class='code' style='font-size: 13px;'>This API depends on 2 ruby gems - Mechanize & JSON. They should be installed by default, while installing this gem. In any case, considering that you already have ruby & rubygems setup, type the below commands in your terminal to install the dependencies - <br><br> <code>gem install mechanize</code> to install Mechanize gem.<br> <code>gem install json</code> to install the native JSON gem.<br><br>Great! You're now ready to install the Inbound API Ruby gem.</code></pre></div><br></li><li> Installation : <br><div class='ui info message'><pre><code class='code' style='font-size: 13px;'>Type <code>gem install inbound_api</code> on your terminal. <br> => Successfully installed inbound_api-1.0.3<br> => 1 gem installed <br><br>After the gem is installed, try out the below commands in your ruby console (<code>irb</code>) or in a ruby file. </code></pre></div><br></li><li> Initializing : <br> <div class='ui info message'> <pre><code class='code' style='font-size: 13px;'><code>require 'inbound_api'</code><br> => true<br><br><code>instance = InboundAPI.new()</code><br>=> #< InboundAPI: ... ></code></pre> </div><br></li><li> Logging in : <br> <div class='ui info message'> <pre><code class='code' style='font-size: 13px;'><code>instance.login('inbound_email_id','inbound_password')</code><br> => {'response'=>'Success'}<br><br>Note that this and also the below statements return a hash, whose 'response' field contains value of 'Success' or 'Failure' - making it easier to debug.</code></pre></div><br></li><li> Fetch a user's data : <br> <div class='ui info message'> <pre><code class='code' style='font-size: 13px;'><code>instance.fetch_user_data('dany_jon_tyrion')</code><br> <br>=> {'response'=>'Success', 'userid'=>'1277018', 'name'=>'Athitya Kumar', 'image_url'=>'https://www.filepicker.io/api/file/d1e3Zr61Q8ef8dRFMeUr', 'location'=>'Chennai', 'karma'=>4, 'number_followers'=>541, 'number_following'=>11341, 'work'=>'Student at IIT Kharagpur', 'company_link'=>'https://athityakumar.github.io/', 'twitter_link'=>'https://twitter.com/dany_jon_tyrion', 'facebook_link'=>'https://www.facebook.com/athitya.kumar', 'linkedin_link'=>nil, 'googleplus_link'=>nil, 'my_link'=>'https://athityakumar.github.io/blog/page1/', 'number_badges'=>nil, 'badges'=>nil, 'recent_activity'=>nil} <br><br>Note that all information of a user that isn't available at inbound.org portal is initialised as nil.</code></pre></div><br></li><li> Fetch a user's followers : <br> <div class='ui info message'> <pre><code class='code' style='font-size: 13px;'><code>followers = instance.fetch_followers('dany_jon_tyrion')['followers'] <br>followers.count</code><br><br> => 535</code></pre></div><br></li><li> Fetch a list of usernames followed by a user : <br> <div class='ui info message'> <pre><code class='code' style='font-size: 13px;'><code>followers = instance.fetch_following('dany_jon_tyrion')</code><br><br> => {'response'=>'Failure'}<br><br>Note that the server 500 error encountered on Inbound.org portal translates into a hash output with 'response' field as 'Failure'.</code></pre></div><br></li><li> Fetch a list of usernames as search results with / without pagination  : <br> <div class='ui info message'> <pre><code class='code' style='font-size: 13px;'><code>instance.search_users(name,location,badges,skills,number_of_pages)</code><br><br>where,<br>name and location are strings initialised as ''<br>badges and skills are lists initialised as []<br>pages is an integer number of pages initialised as 1.<br><br>For example,<br><br><code>instance.search_users('Dany','Chennai',['Inbound','HubSpot'],['Web','Graphics'],100)</code> <br>=> {'response'=>'Success', 'usernames'=>['valiantsystems', 'webdesigningco1', '11Ganapathy', 'DENTISTINDIA', 'RenegadeCricket']}<br><br>Note that the actual list of Badges & Skills can be found by functions <code>instance.get_all_badges() & instance.get_all_skills()</code>.</code></pre></div><br></li><li> Follow a user : <br> <div class='ui info message'> <pre><code class='code' style='font-size: 13px;'><code>instance.follow_user('dany_jon_tyrion')</code><br> => {'response'=>'Success'}<br><br>Note that you'd have to login first to follow / unfollow.</code></pre></div><br></li><li> Unfollow a user : <br> <div class='ui info message'> <pre><code class='code' style='font-size: 13px;'><code>instance.follow_user('dany_jon_tyrion')</code><br> => {'response'=>'Success'}<br><br>Don't try to unfollow yourself - you would get 'Failure' as the response.</code></pre></div><br></li></ul></h4><br><div class='ui horizontal divider'>ANY SUGGESTION?</div><p>You can find this gem on <a>. If there are any suggestions / enhancements you'd like to see in this Ruby API gem, do comment below, or open a new issue <a>. Also, if you liked this project, do star the <a>. And fellow developers, you're welcome to contribute - for, this is an open-source project.</p>",
    "disqus_identifier": "nltiuvwxzspoheyqfagbjdmcrk"
  }
]